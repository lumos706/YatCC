
// Generated from src/frontEnd/SysY2022.g4 by ANTLR 4.12.0


#include "SysY2022Lexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct SysY2022LexerStaticData final {
  SysY2022LexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SysY2022LexerStaticData(const SysY2022LexerStaticData&) = delete;
  SysY2022LexerStaticData(SysY2022LexerStaticData&&) = delete;
  SysY2022LexerStaticData& operator=(const SysY2022LexerStaticData&) = delete;
  SysY2022LexerStaticData& operator=(SysY2022LexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag sysy2022lexerLexerOnceFlag;
SysY2022LexerStaticData *sysy2022lexerLexerStaticData = nullptr;

void sysy2022lexerLexerInitialize() {
  assert(sysy2022lexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<SysY2022LexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "FloatConst", "IntConst", "Identifier", "WS", "COMMENT", "LINE_COMMENT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'const'", "','", "';'", "'int'", "'float'", "'['", "']'", "'='", 
      "'{'", "'}'", "'('", "')'", "'void'", "'if'", "'else'", "'while'", 
      "'break'", "'continue'", "'return'", "'+'", "'-'", "'!'", "'*'", "'/'", 
      "'%'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'&&'", "'||'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "FloatConst", "IntConst", "Identifier", "WS", "COMMENT", "LINE_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,39,357,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,
  	2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,
  	1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,
  	1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
  	1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,
  	1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,
  	1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,
  	1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,4,33,
  	190,8,33,11,33,12,33,191,1,33,1,33,5,33,196,8,33,10,33,12,33,199,9,33,
  	1,33,1,33,4,33,203,8,33,11,33,12,33,204,1,33,1,33,3,33,209,8,33,1,33,
  	4,33,212,8,33,11,33,12,33,213,3,33,216,8,33,1,33,4,33,219,8,33,11,33,
  	12,33,220,1,33,1,33,5,33,225,8,33,10,33,12,33,228,9,33,3,33,230,8,33,
  	1,33,1,33,3,33,234,8,33,1,33,4,33,237,8,33,11,33,12,33,238,1,33,1,33,
  	1,33,1,33,4,33,245,8,33,11,33,12,33,246,1,33,1,33,5,33,251,8,33,10,33,
  	12,33,254,9,33,1,33,1,33,1,33,1,33,1,33,4,33,261,8,33,11,33,12,33,262,
  	1,33,1,33,3,33,267,8,33,1,33,4,33,270,8,33,11,33,12,33,271,3,33,274,8,
  	33,1,33,1,33,1,33,1,33,4,33,280,8,33,11,33,12,33,281,1,33,1,33,5,33,286,
  	8,33,10,33,12,33,289,9,33,3,33,291,8,33,1,33,1,33,3,33,295,8,33,1,33,
  	4,33,298,8,33,11,33,12,33,299,3,33,302,8,33,1,34,4,34,305,8,34,11,34,
  	12,34,306,1,34,1,34,1,34,1,34,4,34,313,8,34,11,34,12,34,314,3,34,317,
  	8,34,1,35,1,35,5,35,321,8,35,10,35,12,35,324,9,35,1,36,4,36,327,8,36,
  	11,36,12,36,328,1,36,1,36,1,37,1,37,1,37,1,37,5,37,337,8,37,10,37,12,
  	37,340,9,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,5,38,351,8,38,
  	10,38,12,38,354,9,38,1,38,1,38,1,338,0,39,1,1,3,2,5,3,7,4,9,5,11,6,13,
  	7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
  	19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
  	61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,1,0,9,1,0,48,57,
  	2,0,69,69,101,101,2,0,43,43,45,45,3,0,48,57,65,70,97,102,2,0,80,80,112,
  	112,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,12,13,
  	32,32,2,0,10,10,13,13,390,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
  	0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,
  	19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
  	0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
  	0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,
  	51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
  	0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
  	0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,79,1,0,0,0,3,85,1,0,0,0,5,
  	87,1,0,0,0,7,89,1,0,0,0,9,93,1,0,0,0,11,99,1,0,0,0,13,101,1,0,0,0,15,
  	103,1,0,0,0,17,105,1,0,0,0,19,107,1,0,0,0,21,109,1,0,0,0,23,111,1,0,0,
  	0,25,113,1,0,0,0,27,118,1,0,0,0,29,121,1,0,0,0,31,126,1,0,0,0,33,132,
  	1,0,0,0,35,138,1,0,0,0,37,147,1,0,0,0,39,154,1,0,0,0,41,156,1,0,0,0,43,
  	158,1,0,0,0,45,160,1,0,0,0,47,162,1,0,0,0,49,164,1,0,0,0,51,166,1,0,0,
  	0,53,168,1,0,0,0,55,170,1,0,0,0,57,173,1,0,0,0,59,176,1,0,0,0,61,179,
  	1,0,0,0,63,182,1,0,0,0,65,185,1,0,0,0,67,301,1,0,0,0,69,316,1,0,0,0,71,
  	318,1,0,0,0,73,326,1,0,0,0,75,332,1,0,0,0,77,346,1,0,0,0,79,80,5,99,0,
  	0,80,81,5,111,0,0,81,82,5,110,0,0,82,83,5,115,0,0,83,84,5,116,0,0,84,
  	2,1,0,0,0,85,86,5,44,0,0,86,4,1,0,0,0,87,88,5,59,0,0,88,6,1,0,0,0,89,
  	90,5,105,0,0,90,91,5,110,0,0,91,92,5,116,0,0,92,8,1,0,0,0,93,94,5,102,
  	0,0,94,95,5,108,0,0,95,96,5,111,0,0,96,97,5,97,0,0,97,98,5,116,0,0,98,
  	10,1,0,0,0,99,100,5,91,0,0,100,12,1,0,0,0,101,102,5,93,0,0,102,14,1,0,
  	0,0,103,104,5,61,0,0,104,16,1,0,0,0,105,106,5,123,0,0,106,18,1,0,0,0,
  	107,108,5,125,0,0,108,20,1,0,0,0,109,110,5,40,0,0,110,22,1,0,0,0,111,
  	112,5,41,0,0,112,24,1,0,0,0,113,114,5,118,0,0,114,115,5,111,0,0,115,116,
  	5,105,0,0,116,117,5,100,0,0,117,26,1,0,0,0,118,119,5,105,0,0,119,120,
  	5,102,0,0,120,28,1,0,0,0,121,122,5,101,0,0,122,123,5,108,0,0,123,124,
  	5,115,0,0,124,125,5,101,0,0,125,30,1,0,0,0,126,127,5,119,0,0,127,128,
  	5,104,0,0,128,129,5,105,0,0,129,130,5,108,0,0,130,131,5,101,0,0,131,32,
  	1,0,0,0,132,133,5,98,0,0,133,134,5,114,0,0,134,135,5,101,0,0,135,136,
  	5,97,0,0,136,137,5,107,0,0,137,34,1,0,0,0,138,139,5,99,0,0,139,140,5,
  	111,0,0,140,141,5,110,0,0,141,142,5,116,0,0,142,143,5,105,0,0,143,144,
  	5,110,0,0,144,145,5,117,0,0,145,146,5,101,0,0,146,36,1,0,0,0,147,148,
  	5,114,0,0,148,149,5,101,0,0,149,150,5,116,0,0,150,151,5,117,0,0,151,152,
  	5,114,0,0,152,153,5,110,0,0,153,38,1,0,0,0,154,155,5,43,0,0,155,40,1,
  	0,0,0,156,157,5,45,0,0,157,42,1,0,0,0,158,159,5,33,0,0,159,44,1,0,0,0,
  	160,161,5,42,0,0,161,46,1,0,0,0,162,163,5,47,0,0,163,48,1,0,0,0,164,165,
  	5,37,0,0,165,50,1,0,0,0,166,167,5,60,0,0,167,52,1,0,0,0,168,169,5,62,
  	0,0,169,54,1,0,0,0,170,171,5,60,0,0,171,172,5,61,0,0,172,56,1,0,0,0,173,
  	174,5,62,0,0,174,175,5,61,0,0,175,58,1,0,0,0,176,177,5,61,0,0,177,178,
  	5,61,0,0,178,60,1,0,0,0,179,180,5,33,0,0,180,181,5,61,0,0,181,62,1,0,
  	0,0,182,183,5,38,0,0,183,184,5,38,0,0,184,64,1,0,0,0,185,186,5,124,0,
  	0,186,187,5,124,0,0,187,66,1,0,0,0,188,190,7,0,0,0,189,188,1,0,0,0,190,
  	191,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,193,1,0,0,0,193,197,5,
  	46,0,0,194,196,7,0,0,0,195,194,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,
  	0,197,198,1,0,0,0,198,302,1,0,0,0,199,197,1,0,0,0,200,202,5,46,0,0,201,
  	203,7,0,0,0,202,201,1,0,0,0,203,204,1,0,0,0,204,202,1,0,0,0,204,205,1,
  	0,0,0,205,215,1,0,0,0,206,208,7,1,0,0,207,209,7,2,0,0,208,207,1,0,0,0,
  	208,209,1,0,0,0,209,211,1,0,0,0,210,212,7,0,0,0,211,210,1,0,0,0,212,213,
  	1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,216,1,0,0,0,215,206,1,0,0,
  	0,215,216,1,0,0,0,216,302,1,0,0,0,217,219,7,0,0,0,218,217,1,0,0,0,219,
  	220,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,229,1,0,0,0,222,226,5,
  	46,0,0,223,225,7,0,0,0,224,223,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,
  	0,226,227,1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,0,229,222,1,0,0,0,229,
  	230,1,0,0,0,230,231,1,0,0,0,231,233,7,1,0,0,232,234,7,2,0,0,233,232,1,
  	0,0,0,233,234,1,0,0,0,234,236,1,0,0,0,235,237,7,0,0,0,236,235,1,0,0,0,
  	237,238,1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,302,1,0,0,0,240,241,
  	5,48,0,0,241,242,5,120,0,0,242,244,1,0,0,0,243,245,7,3,0,0,244,243,1,
  	0,0,0,245,246,1,0,0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,248,1,0,0,0,
  	248,252,5,46,0,0,249,251,7,3,0,0,250,249,1,0,0,0,251,254,1,0,0,0,252,
  	250,1,0,0,0,252,253,1,0,0,0,253,302,1,0,0,0,254,252,1,0,0,0,255,256,5,
  	48,0,0,256,257,5,120,0,0,257,258,1,0,0,0,258,260,5,46,0,0,259,261,7,3,
  	0,0,260,259,1,0,0,0,261,262,1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,
  	273,1,0,0,0,264,266,7,4,0,0,265,267,7,2,0,0,266,265,1,0,0,0,266,267,1,
  	0,0,0,267,269,1,0,0,0,268,270,7,3,0,0,269,268,1,0,0,0,270,271,1,0,0,0,
  	271,269,1,0,0,0,271,272,1,0,0,0,272,274,1,0,0,0,273,264,1,0,0,0,273,274,
  	1,0,0,0,274,302,1,0,0,0,275,276,5,48,0,0,276,277,5,120,0,0,277,279,1,
  	0,0,0,278,280,7,3,0,0,279,278,1,0,0,0,280,281,1,0,0,0,281,279,1,0,0,0,
  	281,282,1,0,0,0,282,290,1,0,0,0,283,287,5,46,0,0,284,286,7,3,0,0,285,
  	284,1,0,0,0,286,289,1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,291,1,
  	0,0,0,289,287,1,0,0,0,290,283,1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,
  	292,294,7,4,0,0,293,295,7,2,0,0,294,293,1,0,0,0,294,295,1,0,0,0,295,297,
  	1,0,0,0,296,298,7,3,0,0,297,296,1,0,0,0,298,299,1,0,0,0,299,297,1,0,0,
  	0,299,300,1,0,0,0,300,302,1,0,0,0,301,189,1,0,0,0,301,200,1,0,0,0,301,
  	218,1,0,0,0,301,240,1,0,0,0,301,255,1,0,0,0,301,275,1,0,0,0,302,68,1,
  	0,0,0,303,305,7,0,0,0,304,303,1,0,0,0,305,306,1,0,0,0,306,304,1,0,0,0,
  	306,307,1,0,0,0,307,317,1,0,0,0,308,309,5,48,0,0,309,310,5,120,0,0,310,
  	312,1,0,0,0,311,313,7,3,0,0,312,311,1,0,0,0,313,314,1,0,0,0,314,312,1,
  	0,0,0,314,315,1,0,0,0,315,317,1,0,0,0,316,304,1,0,0,0,316,308,1,0,0,0,
  	317,70,1,0,0,0,318,322,7,5,0,0,319,321,7,6,0,0,320,319,1,0,0,0,321,324,
  	1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,72,1,0,0,0,324,322,1,0,0,
  	0,325,327,7,7,0,0,326,325,1,0,0,0,327,328,1,0,0,0,328,326,1,0,0,0,328,
  	329,1,0,0,0,329,330,1,0,0,0,330,331,6,36,0,0,331,74,1,0,0,0,332,333,5,
  	47,0,0,333,334,5,42,0,0,334,338,1,0,0,0,335,337,9,0,0,0,336,335,1,0,0,
  	0,337,340,1,0,0,0,338,339,1,0,0,0,338,336,1,0,0,0,339,341,1,0,0,0,340,
  	338,1,0,0,0,341,342,5,42,0,0,342,343,5,47,0,0,343,344,1,0,0,0,344,345,
  	6,37,0,0,345,76,1,0,0,0,346,347,5,47,0,0,347,348,5,47,0,0,348,352,1,0,
  	0,0,349,351,8,8,0,0,350,349,1,0,0,0,351,354,1,0,0,0,352,350,1,0,0,0,352,
  	353,1,0,0,0,353,355,1,0,0,0,354,352,1,0,0,0,355,356,6,38,0,0,356,78,1,
  	0,0,0,31,0,191,197,204,208,213,215,220,226,229,233,238,246,252,262,266,
  	271,273,281,287,290,294,299,301,306,314,316,322,328,338,352,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  sysy2022lexerLexerStaticData = staticData.release();
}

}

SysY2022Lexer::SysY2022Lexer(CharStream *input) : Lexer(input) {
  SysY2022Lexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *sysy2022lexerLexerStaticData->atn, sysy2022lexerLexerStaticData->decisionToDFA, sysy2022lexerLexerStaticData->sharedContextCache);
}

SysY2022Lexer::~SysY2022Lexer() {
  delete _interpreter;
}

std::string SysY2022Lexer::getGrammarFileName() const {
  return "SysY2022.g4";
}

const std::vector<std::string>& SysY2022Lexer::getRuleNames() const {
  return sysy2022lexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& SysY2022Lexer::getChannelNames() const {
  return sysy2022lexerLexerStaticData->channelNames;
}

const std::vector<std::string>& SysY2022Lexer::getModeNames() const {
  return sysy2022lexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& SysY2022Lexer::getVocabulary() const {
  return sysy2022lexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SysY2022Lexer::getSerializedATN() const {
  return sysy2022lexerLexerStaticData->serializedATN;
}

const atn::ATN& SysY2022Lexer::getATN() const {
  return *sysy2022lexerLexerStaticData->atn;
}




void SysY2022Lexer::initialize() {
  ::antlr4::internal::call_once(sysy2022lexerLexerOnceFlag, sysy2022lexerLexerInitialize);
}
